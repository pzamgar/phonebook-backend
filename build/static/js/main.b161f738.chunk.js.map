{"version":3,"sources":["services/contacts.js","services/notifications.js","components/filter.js","components/personForm.js","components/contact.js","components/persons.js","components/notification.js","App.js","index.js"],"names":["baseUrl","contacts","axios","get","then","response","data","newObject","post","id","put","concat","delete","notifications","setNotification","message","type","arguments","length","undefined","setTimeout","Filter","_ref","nameFilter","setNameFilter","react_default","a","createElement","value","onChange","event","target","PersonForm","newName","newPhone","setNewName","setNewPhone","addContact","onSubmit","Contact","contact","deletePerson","className","name","phone","onClick","Persons","persons","setPersons","filterContacts","filter","toLocaleLowerCase","indexOf","c","map","components_contact","key","personName","find","p","window","confirm","contactServices","returnedDeleted","deletePersonPhoneBook","Notification","notification","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","useEffect","initialContacts","isExistContact","personFind","cleanFormsInputs","components_notification","personForm","preventDefault","person","personUpdate","objectSpread","returnedUpdate","notificationServices","catch","error","returnedPerson","errorMessage","components_persons","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b161f738.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nconst deleteItem = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, update, deleteItem };\n","const showNotification = (setNotification, message, type = 'succes') => {\n  setNotification({ message, type })\n  setTimeout(() => {\n    setNotification({ message: null })\n  }, 5000)\n}\n\nexport default { showNotification }\n","import React from \"react\";\n\nconst Filter = ({nameFilter, setNameFilter}) => {\n  return (\n    <div>\n      filter shown with{\" \"}\n      <input\n        value={nameFilter}\n        onChange={event => setNameFilter(event.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst PersonForm = ({ newName, newPhone, setNewName, setNewPhone, addContact }) => {\n  return (\n    <form onSubmit={addContact}>\n      <div>\n        name:{\" \"}\n        <input\n          value={newName}\n          onChange={event => setNewName(event.target.value)}\n        />\n      </div>\n      <div>\n        number:{\" \"}\n        <input\n          value={newPhone}\n          onChange={event => setNewPhone(event.target.value)}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Contact = ({ contact, deletePerson }) => {\n  const label = \"delete\";\n\n  return (\n    <li className=\"person\">\n      {contact.name} {contact.phone}{\" \"}\n      <button onClick={deletePerson}>{label}</button>\n    </li>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport Contact from \"./contact\";\n\nimport contactServices from \"../services/contacts\";\n\nconst Persons = ({ persons, setPersons, nameFilter }) => {\n  const deletePersonPhoneBook = (persons, setPersons, id) => {\n    const personName = persons.find(p => p.id === id);\n\n    if (window.confirm(`Delte ${personName.name}?`)) {\n      contactServices.deleteItem(id).then(returnedDeleted => {\n        setPersons(persons.filter(c => c.id !== id));\n      });\n    }\n  };\n\n  const showContacts = () => {\n    const list = persons\n      .filter(c => filterContacts(c, nameFilter))\n      .map(contact => (\n        <Contact\n          key={contact.id}\n          contact={contact}\n          deletePerson={() =>\n            deletePersonPhoneBook(persons, setPersons, contact.id)\n          }\n        />\n      ));\n    return list;\n  };\n\n  const filterContacts = (contact, filter) => {\n    return (\n      filter.toLocaleLowerCase() === \"\" ||\n      contact.name.toLocaleLowerCase().indexOf(filter.toLocaleLowerCase()) > -1\n    );\n  };\n\n  return <ul>{showContacts()}</ul>;\n};\n\nexport default Persons;\n","import React from 'react'\n\nconst Notification = ({ notification }) => {\n  if (notification.message === null) {\n    return null\n  }\n\n  const style = {\n    color: notification.type === 'error' ? 'red' : 'green',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n\n  return <div style={style}>{notification.message}</div>\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\n\nimport contactServices from './services/contacts'\nimport notificationServices from './services/notifications'\n\nimport Filter from './components/filter'\nimport PersonForm from './components/personForm'\nimport Persons from './components/persons'\nimport Notification from './components/notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhone, setNewPhone] = useState('')\n  const [nameFilter, setNameFilter] = useState('')\n  const [notification, setNotification] = useState({\n    message: null\n  })\n\n  useEffect(() => {\n    contactServices.getAll().then(initialContacts => {\n      setPersons(initialContacts)\n    })\n  }, [])\n\n  const addContact = event => {\n    event.preventDefault()\n    const person = {\n      name: newName,\n      phone: newPhone,\n      id: persons.length + 1\n    }\n\n    if (isExistContact(person)) {\n      if (\n        window.confirm(\n          `${\n            person.name\n          } is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const personFind = persons.find(c => c.name === person.name)\n        const personUpdate = { ...personFind, phone: newPhone }\n        contactServices\n          .update(personFind.id, personUpdate)\n          .then(returnedUpdate => {\n            setPersons(\n              persons.map(c => (c.id !== personFind.id ? c : personUpdate))\n            )\n            cleanFormsInputs()\n            notificationServices.showNotification(\n              setNotification,\n              `Update number phone ${personUpdate.name}`\n            )\n          })\n          .catch(error => {\n            notificationServices.showNotification(\n              setNotification,\n              `Information of ${\n                personUpdate.name\n              } has already been removed from server`,\n              'error'\n            )\n            setPersons(persons.filter(c => c.id !== personUpdate.id))\n          })\n      }\n    } else {\n      contactServices\n        .create(person)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          cleanFormsInputs()\n          notificationServices.showNotification(\n            setNotification,\n            `Added ${person.name}`\n          )\n        })\n        .catch(error => {\n          const errorMessage = error.response.data\n          notificationServices.showNotification(\n            setNotification,\n            errorMessage.error,\n            'error'\n          )\n        })\n    }\n  }\n\n  const isExistContact = contact => {\n    const personFind = persons.find(c => c.name === contact.name)\n    return persons.length === 0 || personFind === undefined ? false : true\n  }\n\n  const cleanFormsInputs = () => {\n    setNewName('')\n    setNewPhone('')\n    setNameFilter('')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter nameFilter={nameFilter} setNameFilter={setNameFilter} />\n      <h2>Add new Contact</h2>\n      <PersonForm\n        newName={newName}\n        newPhone={newPhone}\n        setNewName={setNewName}\n        setNewPhone={setNewPhone}\n        addContact={addContact}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        setPersons={setPersons}\n        nameFilter={nameFilter}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}